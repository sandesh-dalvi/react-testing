[{"content":"import {render,screen} from '@testing-library/react';\r\n\r\nfunction ColorList(){\r\n  return (\r\n    <ul>\r\n    <li>Red</li>\r\n    <li>Blue</li>\r\n    <li>Green</li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nrender(<ColorList />);","type":"code","id":"r3glr"},{"content":"test('getBy,queryBy,findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('textbox')).toThrow();\n\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('textbox');\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"7te8d"},{"content":"test('getBy,queryBy,findBy when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(screen.getByRole('list')).toBeInTheDocument();\n\n  expect(screen.queryByRole('list')).toBeInTheDocument();\n\n  expect(await screen.findByRole('list')).toBeInTheDocument();\n});","type":"code","id":"334s0"},{"content":"test('getBy,queryBy,findBy when finding > 1 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('listitem')).toThrow();\n\n  expect(() => screen.queryByRole('listitem')).toThrow();\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('listitem');\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"um1ev"},{"content":"test('getAllBy,queryAllBy,findAllBy', async () => {\n  render(<ColorList />);\n\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\n\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\n\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\n});","type":"code","id":"0bx0f"},{"content":"test('favor using getBy to prove an element exists',async()=>{\r\n  render(<ColorList />);\r\n\r\nconst element = screen.getByRole('list');\r\n\r\nexpect(element).toBeInTheDocument();\r\n})","type":"code","id":"hpf4y"},{"content":"test('favor using queryBy to prove an element does not exists', async () => {\n  render(<ColorList />);\n\n  const element = screen.queryByRole('textbox');\n\n  expect(element).not.toBeInTheDocument();\n});","type":"code","id":"6fn2n"},{"content":"import { useState, useEffect } from 'react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'green', 'blue']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors().then((c) => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LoadableColorList />);","type":"code","id":"k7bsx"},{"content":"test('favor findBy or findAllBy when data fetching', async () => {\n  render(<LoadableColorList />);\n\n  const els =await screen.findAllByRole('listitem');\n\n  expect(els).toHaveLength(3);\n});","type":"code","id":"6v90b"}]